@model List<ArticlesViewer.Models.Article>

<h2>WordVoyager</h2>

<div class="MyTable">
    <div class="myrow">
        <button >Export to PDF</button>
        <input id="searchBox" onkeyup="searchInitiate(event)" style="margin-left:auto" type="text" placeholder="Search by Title"/>
        <button style="margin:0;margin-left:10px" onclick="location.href='/WordVoyager/Logout'">Logout</button>
    </div>
    <div class="myrow heading">
        <div class="mycol" style="width:40px;min-width:40px">
            <input type="checkbox" />
        </div>
        <div class="mycol" onclick="sort('title')" style="cursor:pointer">
            <p>Title</p>
        </div>
        <div class="mycol" >
            <p>Content</p>
        </div>
        <div class="mycol"  onclick="sort('published')" style="cursor:pointer">
            <p>Published</p>
        </div>
        <div class="mycol"  onclick="sort('modified')" style="cursor:pointer">
            <p>Modified</p>
        </div>
        <div class="mycol" >
            <p>Author</p>
        </div>
        <div class="mycol">
            <p>Category</p>
        </div>
        <div class="mycol">
            <p>Actions</p>
        </div>
    </div>
    <div class="content" id="contentRowsHolder">
        @foreach (var article in Model) {
            <div class="myrow">
                <div class="mycol" style="width:40px;min-width:40px">
                    <input type="checkbox" />
                </div>
                <div class="mycol">
                    <p>@Html.DisplayFor(e => article.Title)</p>
                </div>
                <div class="mycol">
                    <p>@Html.DisplayFor(e => article.Content)</p>
                </div>
                <div class="mycol">
                    <p>@Html.DisplayFor(e => article.PublishedDate)</p>
                </div>
                <div class="mycol">
                    <p>@Html.DisplayFor(e => article.LastModifiedDate)</p>
                </div>
                <div class="mycol">
                    <p>@Html.DisplayFor(e => article.Author)</p>
                </div>
                <div class="mycol">
                    <p>@Html.DisplayFor(e => article.Category)</p>
                </div>
                <div class="mycol">
                    <button class="btn btn-primary" onclick="location.href='/WordVoyager/Delete?articleId=@Html.DisplayFor(e=>article.ArticleId)&deleteFlag=true'">Delete</button>
                    <button class="btn btn-primary" onclick="location.href='/WordVoyager/Edit?articleId=@Html.DisplayFor(e=>article.ArticleId)'">Edit</button>
                </div>
            </div>
        }
    </div>
    <div class="myrow">
        <button class="btn btn-primary" id="prevBtn" onclick="navigateToPage('prev')">Prev</button>
        <button class="btn btn-primary" id="nextBtn" onclick="navigateToPage('next')">Next</button>
        <button class="btn btn-primary" style="margin-left:auto" id="nextBtn" onclick="location.href='/WordVoyager/Create'">Add</button>
    </div>
</div>

<link rel="stylesheet" type="text/css" href="~/Content/WordVoyager.css" />
<script>

    
    function searchInitiate(event) {
        var keyCode = event.keyCode || event.which;
        if (keyCode == '13') {
            let searchBox = document.getElementById("searchBox");
            location.href = "/WordVoyager/Index?searchTitle=" + searchBox.value;
        }
    }

    function navigateToPage(direction) {
        let urlParams = new URLSearchParams(window.location.search);
        let page = urlParams.get('page');
        let limit = urlParams.get('limit');

        if (!page || !limit) {
            page = 1;
            limit = 3;
        } else {
            page = parseInt(page);
            limit = parseInt(limit);
            if (direction === 'prev') {
                page = page - 1;
            } else if (direction === 'next') {
                page = page + 1;
            }
        }

        let url = '/WordVoyager/Index?page=' + page + '&limit=' + limit;
        location.href = url;
    }

    let contentRowsHolder = document.getElementById("contentRowsHolder");

    function sort(type) {
        let nodes = Array.from(contentRowsHolder.children);

        if (type == 'title') {
            nodes.sort((a, b) => {
                let titleA = a.querySelector('.mycol:nth-child(2) p').textContent.toLowerCase();
                let titleB = b.querySelector('.mycol:nth-child(2) p').textContent.toLowerCase();
                return titleA.localeCompare(titleB);
            });
        } else if (type == 'published') {
            nodes.sort((a, b) => {
                let dateA = new Date(a.querySelector('.mycol:nth-child(4) p').textContent);
                let dateB = new Date(b.querySelector('.mycol:nth-child(4) p').textContent);
                return dateA - dateB;
            });
        } else if (type == 'modified') {
            nodes.sort((a, b) => {
                let dateA = new Date(a.querySelector('.mycol:nth-child(5) p').textContent);
                let dateB = new Date(b.querySelector('.mycol:nth-child(5) p').textContent);
                return dateA - dateB;
            });
        }

        nodes.forEach(node => contentRowsHolder.appendChild(node));
    }
</script>